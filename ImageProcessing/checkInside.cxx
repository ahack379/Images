#ifndef LARLITE_CHECKINSIDE_CXX
#define LARLITE_CHECKINSIDE_CXX

#include "checkInside.h"
#include "math.h"
//#include "/Users/ah673/KazuGoofed/StdLArbys/lec_001/mytimer.h"

namespace larlite {

  bool checkInside::initialize() {

std::vector<std::pair<double,double>> c0 = { { 1590.557 ,     5662.4692627}, { 1590.557 ,     5656.8222168}, { 1590.557 ,     5651.1751709}, { 1589.78  ,      5650.04576172}, { 1586.672 ,    5645.528125}, { 1586.672 ,     5639.8810791}, { 1585.895 ,      5638.75166992}, { 1582.787 ,     5634.2340332}, { 1582.01  ,      5633.10462402}, { 1578.902 ,     5628.5869873}, { 1578.902 ,      5622.93994141}, { 1578.125 ,      5621.81053223}, { 1575.017 ,      5617.29289551}, { 1574.24  ,      5616.16348633}, { 1571.132 ,      5611.64584961}, { 1570.355 ,      5610.51644043}, { 1567.247 ,      5605.99880371}, { 1567.247 ,      5600.35175781}, { 1566.47  ,      5599.22234863}, { 1563.362 ,      5594.70471191}, { 1562.585 ,      5593.57530273}, { 1559.477 ,      5589.05766602}, { 1559.477 ,      5583.41062012}, { 1558.7   ,      5582.28121094}, { 1555.592 ,      5577.76357422}, { 1554.815 ,      5576.63416504}, { 1551.707 ,      5572.11652832}, { 1551.707 ,      5566.46948242}, { 1550.93  ,      5565.34007324}, { 1547.045 ,      5565.34007324}, { 1543.937 ,      5560.82243652}, { 1543.16  ,      5559.69302734}, { 1540.052 ,      5555.17539062}, { 1539.275 ,      5554.04598145}, { 1535.39  ,      5554.04598145}, { 1534.613 ,      5555.17539062}, { 1531.505 ,      5559.69302734}, { 1527.62  ,      5559.69302734}, { 1526.843 ,      5560.82243652}, { 1526.843 ,      5566.46948242}, { 1526.843 ,      5572.11652832}, { 1526.843 ,      5577.76357422}, { 1526.843 ,      5583.41062012}, { 1527.62  ,     5584.5400293}, { 1530.728 ,      5589.05766602}, { 1530.728 ,      5594.70471191}, { 1531.505 ,      5595.83412109}, { 1534.613 ,      5600.35175781}, { 1534.613 ,      5605.99880371}, { 1535.39  ,      5607.12821289}, { 1538.498 ,      5611.64584961}, { 1539.275 ,      5612.77525879}, { 1542.383 ,      5617.29289551}, { 1543.16  ,      5618.42230469}, { 1546.268 ,      5622.93994141}, { 1547.045 ,      5624.06935059}, { 1550.93  ,      5624.06935059}, { 1554.815 ,      5624.06935059}, { 1555.592 ,      5622.93994141}, { 1554.815 ,      5621.81053223}, { 1550.93  ,      5621.81053223}, { 1547.822 ,      5617.29289551}, { 1547.045 ,      5616.16348633}, { 1543.937 ,      5611.64584961}, { 1543.16  ,      5610.51644043}, { 1540.052 ,      5605.99880371}, { 1539.275 ,      5604.86939453}, { 1536.167 ,      5600.35175781}, { 1535.39  ,      5599.22234863}, { 1532.282 ,      5594.70471191}, { 1532.282 ,      5589.05766602}, { 1531.505 ,      5587.92825684}, { 1528.397 ,      5583.41062012}, { 1528.397 ,      5577.76357422}, { 1528.397 ,      5572.11652832}, { 1528.397 ,      5566.46948242}, { 1531.505 ,     5561.9518457}, { 1532.282 ,      5560.82243652}, { 1535.39  ,     5556.3047998}, { 1538.498 ,      5560.82243652}, { 1539.275 ,     5561.9518457}, { 1543.16  ,     5561.9518457}, { 1546.268 ,      5566.46948242}, { 1547.045 ,     5567.5988916}, { 1550.153 ,      5572.11652832}, { 1550.153 ,      5577.76357422}, { 1550.93  ,     5578.8929834}, { 1554.038 ,      5583.41062012}, { 1554.815 ,     5584.5400293}, { 1557.923 ,      5589.05766602}, { 1558.7   ,     5590.1870752}, { 1561.808 ,      5594.70471191}, { 1561.808 ,      5600.35175781}, { 1562.585 ,      5601.48116699}, { 1565.693 ,      5605.99880371}, { 1566.47  ,      5607.12821289}, { 1569.578 ,      5611.64584961}, { 1570.355 ,      5612.77525879}, { 1573.463 ,      5617.29289551}, { 1573.463 ,      5622.93994141}, { 1574.24  ,      5624.06935059}, { 1577.348 ,     5628.5869873}, { 1578.125 ,      5629.71639648}, { 1581.233 ,     5634.2340332}, { 1582.01  ,      5635.36344238}, { 1585.118 ,     5639.8810791}, { 1585.118 ,    5645.528125}, { 1585.118 ,     5651.1751709}, { 1585.895 ,      5652.30458008}, { 1589.003 ,     5656.8222168}, { 1589.003 ,     5662.4692627}, { 1585.895 ,      5666.98689941}, { 1585.118 ,      5668.11630859}, { 1582.01  ,      5672.63394531}, { 1578.125 ,      5672.63394531}, { 1574.24  ,      5672.63394531}, { 1570.355 ,      5672.63394531}, { 1569.578 ,      5673.76335449}, { 1570.355 ,      5674.89276367}, { 1574.24  ,      5674.89276367}, { 1578.125 ,      5674.89276367}, { 1582.01  ,      5674.89276367}, { 1585.895 ,      5674.89276367}, { 1586.672 ,      5673.76335449}, { 1586.672 ,      5668.11630859}, { 1589.78  ,      5663.59867188}, { 1590.557 ,     5662.4692627} } ;

  contours = c0;

    return true;
  }
  
  bool checkInside::analyze(storage_manager* storage) {

//    Watch time ;

    auto const & ev_cl = storage->get_data<larlite::event_cluster>("cccluster");
    
    if (!ev_cl->size()){
      std::cout << "Did not find cluster data product!" << std::endl;
      return false;
      }   

    ::larlite::event_hit* ev_hit = nullptr;
    auto const& hit_index_v = storage->find_one_ass(ev_cl->id(), ev_hit, "cccluster");

    if (!ev_hit) {
      std::cout << "Did not find hit data product!" << std::endl;
      return false;
      }   

//    time.Start();

   _hits.reserve(ev_hit->size());

   for(size_t i=0; i < ev_hit->size(); i++){
        auto const & h = ev_hit->at(i);
        if ( h.View() == 2 ){
          std::pair<double,double> point ( h.WireID().Wire, h.PeakTime() ) ;
          if ( InPolygon(contours, point) )
            _hits.push_back(h);
        }
     }

   //std::cout<<"This took: "<<time.WallTime() <<std::endl ;

    return true;
  }

  int checkInside::InPolygon(std::vector<std::pair<double,double>> & points, std::pair<double,double> & p)
  {
     double angle=0;
     double x1, y1, x2, y2;
     double pi = atan(1)*4 ;

     auto const & n = points.size()/2;
     points.push_back(std::make_pair(points[0].first,points[0].second));

     for (size_t i = 0 ; i < n ; i+=10) {
        x1 = points[i].first  - p.first;
        y1 = points[i].second - p.second;
        x2 = points[(i+10)].first - p.first;
        y2 = points[(i+10)].second - p.second;
        angle += Angle2D(x1,y1,x2,y2);
     }   

       std::cout<<"angle is: "<<angle<<std::endl ;

   if (fabs(angle) < 1.1*pi) 
      return false;
   else
      return true;
   }

  double checkInside::Angle2D(double & x1, double & y1, double & x2, double & y2)
  {
     double dtheta,theta1,theta2;
     double pi = atan(1)*4 ;
  
     theta1 = atan2(y1,x1);
     theta2 = atan2(y2,x2);
     dtheta = theta2 - theta1;
     while (dtheta > pi)
        dtheta -= 2*pi ;
     while (dtheta < -pi)
        dtheta += 2*pi ;
  
     return dtheta ;
  }

  bool checkInside::finalize() { return true; }

}
#endif
